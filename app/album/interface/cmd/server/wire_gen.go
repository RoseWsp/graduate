// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"graduate/app/album/interface/internal/biz"
	"graduate/app/album/interface/internal/conf"
	"graduate/app/album/interface/internal/data"
	"graduate/app/album/interface/internal/server"
	"graduate/app/album/interface/internal/service"
)

// Injectors from wire.go:

func initApp(grpc *conf.Grpc, confServer *conf.Server, logger log.Logger) (*kratos.App, func(), error) {
	grpcClient, err := data.NewGrpcClient(grpc)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(grpcClient, logger)
	if err != nil {
		return nil, nil, err
	}
	interfaceRepo := data.NewInterfaceRepo(dataData, logger)
	interfaceUseCase := biz.NewInterfaceUseCase(interfaceRepo, logger)
	interfaceService := service.NewInterfaceService(interfaceUseCase, logger)
	grpcServer := server.NewGRPCServer(confServer, logger, interfaceService)
	app := newApp(logger, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
